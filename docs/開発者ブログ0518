<title>Gitで「開発ソース以外」をバージョン管理してみる。</title>

こんにちは、フロントエンドエンジニアの小原です。
さて、この開発者ブログですが実は文書自体をGitでバージョン管理してたりします。
なんでわざわざそんなことを？と思う方もいらっしゃるかもしれませんが、
小原はおっちょこちょいなので、よくtypoします。
また、変な日本語や表現も多く書いたその場では「よし、大丈夫だろ」と思っても、
ライターやディレクターにレビューしてもらったり、数日後自分で見返したりすると
「なんじゃこりゃ」となることも結構あります。
書き直しも発生するので、バージョン管理をしたくなります。

ファイル名を変えるという、手動バージョン管理もありますが、誤って上書きする、削除してしまうなど事故も起こりやすいですし、何より面倒です。

そこで「文章をバージョン管理したい」→「ついでにレビューもスマートにしたい」
→「Gitでプルリク使えばレビューもバージョン管理も出来るじゃん」と、
割りと単純な発想ではじめました。
でも、さすがにライターなど非エンジニアにGitは荷が重い。。。
ということで、
まずは「ブログをテキストで下書きしてGit commit」→「Bitbucketでレビュー」というGit-flowから始めました。

※今回のブログは、Gitを使ったことがある方、または学習中の方向けとなります。
Gtiの概要、文中の用語については、<a href="http://www.backlog.jp/git-guide/intro/intro1_1.html">Gitを使ったバージョン管理【Gitの基本】 | サルでもわかるGit入門 〜バージョン管理を使いこなそう〜 | どこでもプロジェクト管理バックログ</a>など、入門向けサイトを参照されることをおすすめします。

<h3>SourceTreeをインストール</h3>
<li><a href="https://ja.atlassian.com/software/sourcetree">SourceTree - Windows と Mac 対応 Git & Mercurial 無料クライアント | Atlassian</a></li>

<a href="#">前回のブログでも書いたとおり</a>Atomなど、エディタやIDEでもGitに対応しているのですが、
やはりSourceTreeが使いやすいのでインストールすることをおすすめします。
単にGUIになるというだけでなく、Git-flowを視覚的に理解、差分をひと目で確認できるなどの利点があります((いざという時はCUIで操作する必要もありますが))。

インストール後、初期設定でMy Atlassianアカウントを作成します。
Googleアカウントでもいいのですが、ここは新規に作成しておきましょう。

<h3>Bitbucketにリポジトリ作成</h3>
Branuでは普段の開発はGitHudで行っていますが、今回は<a href="https://ja.atlassian.com/software/bitbucket">Bitbucket</a>を利用します。理由としては
・日本語に対応（GitHubは英語）
・無料で5ユーザーまでプライベートリポジトリ利用可能（今回は導入テストのため。本格的に運用する場合は有料プランも検討）
・ブランチの作成、プルリクエストの作成などをブラウザ上から行える。
などがあります。出来ることはGitHubと大きく変わらないのですが、初心者への導入を考えると、やはり日本語で使えるのが大きいです。

<h3>SourceTreeにリポジトリをクローン</h3>
上記でBitbucketに作ったGitリポジトリをクローンします。

ローカルの指定した場所に新しくフォルダが出来ました。
最初は空ですが、ここにファイルを入れていけばバージョン管理できます。

<h3>作業ブランチの作成</h3>
作業するためのブランチを作成します。

通常の開発と違い、単純な文書管理なのでmasterに直接コミットしてしまってもいいのですが、「プルリクエストで文書レビューを行いたい」という目的があるので、今回はブランチを作成しました。
