<title>Gitでドキュメントなど、「開発ソース以外」をバージョン管理してみる。</title>

こんにちは、フロントエンドエンジニアの小原です。
さて、この開発者ブログですが実はテキスト自体をGitでバージョン管理してたりします。
なんでわざわざそんなことを？と思う方もいらっしゃるかもしれませんが、
小原はおっちょこちょいなので、よくtypoします。
また、変な日本語や表現も多く書いたその場では「よし、大丈夫だろ」と思っても、
ライターやディレクターにレビューしてもらったり、数日後自分で見返したりすると
「なんじゃこりゃ」となることも結構あります。
書き直しも発生したり、「やっぱ前のほうがいいな」なんてこともありますので、バージョン管理をしたくなります。

ファイル名を変えるという、手動バージョン管理もありますが(Excelあるある)、誤って上書きする、削除してしまうなど事故も起こりやすいですし、何より面倒です。

そこで「文章をバージョン管理したい」→「ついでにレビューもスマートにしたい」
→「Gitでプルリク使えばレビューもバージョン管理も出来るじゃん」と、
割りと単純な発想ではじめました。
でも、さすがにライターなど非エンジニアにGitは荷が重い。。。
ということで、
まずは「ブログをテキストで下書きしてGit commit」→「Bitbucketでレビュー」というGit-flowから始めました。

※今回のブログは、Gitを使ったことがある方、または学習中の方向けとなります。
Gitの概要、文中の用語、「そもそもGitって何？」という方は、<a href="http://www.backlog.jp/git-guide/intro/intro1_1.html">Gitを使ったバージョン管理【Gitの基本】 | サルでもわかるGit入門 〜バージョン管理を使いこなそう〜 | どこでもプロジェクト管理バックログ</a>など、入門向けサイトを参照されることをおすすめします。

<h3>SourceTreeをインストール</h3>
<li><a href="https://ja.atlassian.com/software/sourcetree">SourceTree - Windows と Mac 対応 Git & Mercurial 無料クライアント | Atlassian</a></li>

Macであれば標準で付属しているターミナルで、WindowsであればPuTTyなどのSSHクライアントもあり、<a href="#">前回のブログでも書いたとおり</a>Atomなど、エディタやIDEでもGitに対応しているのですが、
やはりSourceTreeが使いやすいのでインストールすることをおすすめします。
単にGUIになるというだけでなく、Git-flowを視覚的に理解、差分をひと目で確認できるなどの利点があります((いざという時はCUIで操作する必要もありますが))。

インストール後、初期設定でMy Atlassianアカウントを作成します。
Googleアカウントでもいいのですが、ここは新規に作成しておきましょう。

<h3>Bitbucketにリポジトリ作成</h3>
Branuでは普段の開発はGitHudで行っていますが、今回は<a href="https://ja.atlassian.com/software/bitbucket">Bitbucket</a>を利用します。理由としては
・日本語に対応（GitHubは英語）
・無料で5ユーザーまでプライベートリポジトリ利用可能（今回は導入テストのため。本格的に運用する場合は有料プランも検討）
・ブランチの作成、プルリクエストの作成などをブラウザ上から行える。
などがあります。出来ることはGitHubと大きく変わらないのですが、初心者への導入を考えると、やはり日本語で使えるのが大きいです。

<h3>SourceTreeにリポジトリをクローン</h3>
上記でBitbucketに作ったGitリポジトリをクローンします。

ローカルの指定した場所に新しくフォルダが出来ました。
最初は空ですが、ここにファイルを入れていけばバージョン管理できます。

<h3>作業ブランチの作成</h3>
作業するためのブランチを作成します。

通常の開発と違い、単純な文書管理なのでmasterに直接コミットしてしまってもいいのですが、「プルリクエストで文書レビューを行いたい」という目的があるので、今回はブランチを作成しました。

<h3>実際に書いたテキスト、ファイル等をリポジトリのフォルダに設置する。</h3>
上記でクローンしたローカルリポジトリに、実際に作業したファイルを設置します。

今後の作業は、リポジトリ内のファイルを直接編集しましょう。

<h3>コミットしてプッシュする</h3>
実際に作業したファイルをコミットしてプッシュします。この作業をしないと、ローカルに保存しただけになってしまいます。

Gitはテキストファイルだけでなく、バイナリファイルの変更にも対応しているので、ブログで使用する画像もここに上げてしまいます((通常の場合、バイナリファイルの場合は差分ではなくファイル自体の変更のみ管理。))((PSDや動画ファイルなど、重いファイルはGitでの管理には不向きです。<a href="https://git-lfs.github.com/">Git LFS</a>などを使えば解決しますが、今回は割愛します。))。

<h3>出来た文章をプルリクエストする</h3>
作成した文章（今回はブログの下書き）をプルリクエストします。プルリクエストはSourceTreeからも出来ますが、今回は「ライター・ディレクターにレビュー依頼」するので、あえてブラウザから(Bitbucket)からプルリクエストします。

<h3>ブラウザ上でレビュー・マージ</h3>
GitHubと同じく、レビューやマージもブラウザ上で行なえます。

<h3>おまけ：BitbucketからSlackへプッシュやプルリクエストなどを通知。</h3>
さて、Bitbucketでプルリクエストすれば登録したメールアドレスに通知が飛ぶのですが、ここはいまどき風にSlackに通知するようにします。<a href="https://slack.com/apps">App Directory</a>から「Bitbucket」を検索。Appの詳細画面でInstallボタンをクリックします。

Appの設定画面で、通知を配信するSlackのチャンネルを設定します。
#generalや普段のやり取りで使っているチャンネルは、無関係な人には通知爆撃になってしまうのでおすすめしません。ここは専用チャンネルを作って、関係者のみ招待しましょう。

設定画面の「Webhook URL」をコピーしましょう。

Bitbucket側のSlack通知するリポジトリの設定画面に入り、先程のWebhook URLをペーストします。

通知が必要なものをチェックしSaveします。

これでBitbucketからSlackに通知するようになりました。

<h3>他にも使える。開発以外でGitHub/Bitbucket</h3>
<h4>勉強会資料公開</h4>
以前、Branu開発部でGitの勉強会を開いた際、GitHub.pagesを利用してスライドを公開しました。

<a href="https://pinball1973b.github.io/git_work_slide/">ゼロから始める$git commit -m</a>

Keynoteで作っても良かったのですが、せっかくGitの勉強会をやるんだからGitHubを利用しまして、HTML5で作りました。ファイルは以下からclone出来ます。

https://github.com/pinball1973b/git_work_slide

<h4>小説を書く</h4>
芥川賞作家の円城塔さんはGitHubで一時期小説を公開していました。

https://github.com/EnJoeToh

円城さんは元々Webエンジニアなので、単にSNSやblogではなくGitHubで公開したのでしょうけど、バージョン管理が出来たり、ブランチを分けて別展開を書いたり、Issueやプルリクエスト使ってソーシャル執筆したりと、いかにも円城さんらしいものとなっております((いわゆるメタフィクション))。

さすがに人に見せるのは、、、という人はまずはBitbucketで管理してみるのをおすすめします。

<h4>開発以外の仕事用ドキュメント管理</h4>
例えば、小原は下記のものをGitとBitbucketで管理しています。
・人事考課用シート（提出前に何回も書き直したり、半期の評価ごとに内容を書き換えるため）
・面接用インタビューシート（会う人や時期によって内容が変わるため）

オープンなものはGitHub、プライベートなものはBitbucketという感じで使いわてます。

<h3>Gitを仕事に最大限に活用したい方、一緒に働きませんか？</h3>
「SourceTreeなんて邪道だ！ターミナルでCUIでPRまでいけよ！」というギークなエンジニアの方、「Gitは始めたいけど、いまいち分からないな」というUI/UXデザイナーの方。Branuで一緒に働きませんか？ギークなエンジニアの方はもっとクールなGitの使い方を提案して下さい。UI/UXデザイナーは手伝いますので、一緒にプルリク開発しましょう。
