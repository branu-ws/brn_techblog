<title>Nuxt.js勉強会を開催しました</title>
<img src="eat_lp.jpg">

こんにちは、フロントエンドエンジニアの小原です。<a href="https://www.wantedly.com/companies/branu/post_articles/83478">先日のブログでも書きましたが</a>、今Vue.js界隈で一番熱い「Nuxt.js」について、社内勉強会を行いました。

<img title="河西さんの写真">

いつも通り、GitHubに勉強会で作ったスクリプトは上げてあります。

<a href="https://github.com/pinball1973b/nuxt_works">GitHubリポジトリ</a>

※今回は参加者のNuxt.js(とWebpack)の構築の学習も兼ねているので、あえてGitHub Pagesは使っていません。ご興味がある方はクローンして、実際にローカルで構築してみて下さい。
以下は使ってみた使ってみた感想です。

<h3>環境構築が楽になる</h3>
<img title="nuxt.png" alt="Nuxt.js">
この手のフロントエンドフレームワークの環境構築というと、packageやconfigを書くだけで面倒だったり、必要なライブラリをnpmでインストールしたりと何かと一番最初の敷居が高いのですが、今回は非常に簡単に環境構築できました（始めてwebpackを構築したときは半日かかった。。。）もちろん、UIライブラリやプラグインなどを追加する場合は、npmやyarnなどでインストールする必要があるのですが、少なくとも最初の構築でコケることはありませんでした。

<h3>軽いVue.jsを簡単にフルスタック化するフレームワーク</h3>

<a href="https://ja.nuxtjs.org/">公式サイト</a>では「ユニバーサル Vue.jsアプリケーション」と名乗っていますが、印象としてはVue.jsをwebpackによってフルスタック化したものと言う感じでした（フルスタックの定義にもよりますが、UIライブラリからルーティング、レンダラやコンパイラを内包しているので、Angular的なフルスタックフレームワークだと思う）。

一方でES6(ES7)、TypeScript、CoffeeScriptなど複数のECMAScript/AltJSに対応している(Angularのイケてないところ)、構文的にはHTMLとCSSとJavaScriptが分離されているというVue.jsの特性(Reactのイケてないところ)、SSRだけでなくSPAや静的なページの生成も可能と、出来ることの多さの割に学習コストが低いという、Vue.jsの特性も保っていました。

<h3>Vuexうめえ</h3>
現状のeatではVuexは部分的に使っているのですが、Vuexでフロントをコンポーネント的に書くのがすごく楽でしたね。これはNuxt.jsの特徴というよりもVuexの特徴ですが、Vuexが最初からフレームワークに取り込まれているので、構築に悩むことがないという意味で、Vue.js初心者が次にコンポーネントを学習するのに最適だと思います。もっと簡単という意味では<a href="http://riotjs.com/ja/">RIOT</a>と言うものもありますが、拡張性ではVue+Vuexの方が優れています。

またReactでよく使われるJSXと違い、デザインとロジックを分けるというMVC(MVVM)の思想も受け継いでいるので、コンポーネント指向とMVCモデルのいいとこ取りという感じですね。

<h3>豊富な日本語ナレッジ</h3>
Vue.jsは<a href="https://jp.vuejs.org/index.html">Vueの公式ドキュメント</a>も含め、日本語ナレッジが豊富です。Nuxtもやはり公式ドキュメントが充実しています。流行しているおかげでQiitaにも多くのナレッジが投稿されています。困ったときは、たいていググればなんとかなる。

<h3>単なるSSRフレームワークではない、Vue.jsによるWebフロント開発フレームワーク</h3>
Nuxt.jsはSSRフレームワークとして流行していますが公式サイトにもある通り、SSR/SPA/静的サイトの生成と様々な使い方ができます。WEBメディアやWordPressテンプレートならばSSR、WebアプリならばSPA、コーポレートサイトやドキュメントなどを作るなら静的サイトの生成といった感じでしょうか。

「静的サイト？普通にHTMLとCSSとどう違うの？」と思われる方もいるかもしれませんが、ヘッダーやフッター、サイドバーなど共通部のコンポーネント化、画像などのアセット管理、Vue.jsを使ったフォームのバリデーションなど、APIの導入など、通常のサイト制作でもメリットがあります。

SPAを構築するにしても、上記にも書いたとおり環境構築が大幅に楽になるので、導入するメリットは大きいです。

<h3>これを使ってなんか作りたいなー</h3>
eatプロジェクトにも将来的に導入するにしても、勉強半分遊び半分で個人的になりか作りたいなー欲が出てきました。そんな訳で次回は「Nuxt.jsで○○作った」になりそうです。
