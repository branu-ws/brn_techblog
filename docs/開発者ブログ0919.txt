<title>今さら聞けない？MVC(MVVM)とJavaScriptフレームワーク</title>
こんにちは、フロントエンドエンジニアの小原です。

さて、ブラニューではフロントエンドエンジニアを募集しておりまして、小原も一次面接を担当しております。その際必ず「最近JSフレームワークが流行していますが、興味があったり自分で学習していたりするフレームワークを教えて下さい。」と質問するようにしています。

ゴリゴリのJavaScripterやフロントエンドエンジニアならば「何を今更そんな質問を」となりますが、HTMLコーダーやWebデザイナーからの転向組ですと中々しっかり回答できる人は少ないです。逆にSIerなどからのバックエンド転向組の方でも、やはり回答できる方は少ないです。ここらへんは、本当にフロントエンド技術が好きで、アンテナを高くしている人でないと追いかけきれないという部分もあります。どちらかと言うとアンテナの高さや、キャッチアップする能力を見るための質問ですね。

さて、そんなわけで本日のテーマは「今さら聞けない？MVC(MVVM)とJavaScriptフレームワーク」です。

<h3>MVCとは？</h3>
<blockquote>
MVC（Model View Controller モデル・ビュー・コントローラ）は、ユーザーインタフェースをもつアプリケーションソフトウェアを実装するためのデザインパターンである。
アプリケーションソフトウェアの内部データを、ユーザーが直接参照・編集する情報から分離する。そのためにアプリケーションソフトウェアを以下の3つの部分に分割する。
・model: アプリケーションデータ、ビジネスルール、ロジック、関数
・view: グラフや図などの任意の情報表現
・controller: 入力を受け取りmodelとviewへの命令に変換する
</blockquote>
<a href="https://ja.wikipedia.org/wiki/Model_View_Controller">Model View Controller | Wikipedia</a>

<img title="mvc.png">

要はアプリケーションのロジック部分とその受け渡し部分、表示部分を分離したソフトウェア設計のことです。こういう設計をすることによって保守性を上げ、プログラマ・バックエンドエンジニアがロジックに専念し、デザイナー・フロントエンドエンジニアがUIに専念することが出来ます。

数年前まではWEBアプリケーションにMVCフレームワークといえばPHPやRuby、Javaなどバックエンドのものが主流で、データの加工からブラウザへの表示まで全部サーバでやるのが当たり前でした。

<h3>JavaScriptフレームワーク</h3>
しかしクライアントマシンやブラウザの性能向上、Ajaxの登場、フラッシュからHTML5への移行、UIのリッチ化、マイクロサービス（とバックエンドのAPI化）の流行などにより、2009年〜2010年頃からAngular.jsやBackbone.jsなどのJavaScriptフレームワーク（あるいはライブラリ）が登場しました。

単純なDOM操作であればjQueryでも十分だったのですが、仮想DOMによる高速化やデータバインディングなど、サーバ資源に負荷をかけず表示を高速化する手段が出てきたため、これを解決するJavaScriptフレームワークが次々登場しました。現在はバックエンドはビジネスロジック(及びAPI)に専念し、ViewとController(及びViewmodelなど)をフロントで処理するというアーキテクチャが流行りとなっています（サーバサイドレンダリングというものもありますが、今回は取り上げません）。

下記が現在よく使われている主要なJavaScriptフレームワーク（ライブラリ）。

・<a href="https://facebook.github.io/react/">React</a>
・<a href="https://angular.io/">Angular</a>
・<a href="https://angularjs.org/">Angular.js</a>
・<a href="https://jp.vuejs.org/index.html">Vue.js</a>
・<a href="http://aurelia.io/">aurelia</a>
・<a href="http://riotjs.com/ja/">Riot</a>
・<a href="http://backbonejs.org/">Backbone</a>
・<a href="http://knockoutjs.com/">Knockout</a>
・<a href="https://www.emberjs.com/">ember</a>
・<a href="https://jquery.com/">jQuery</a>

jQueryはライブラリだしReactはViewのみのライブラリだったり、ほとんどがMVCというよりもMVVM(Model View ViewModel)フレームワークだったり、少しずつ目的や機能が違いますが、現状でこのぐらいあります。あとAngularとAngular.js(1.X系)は別物として扱いました。jQueryは別として2016年頃まではReactとAngular.jsが流行していましたが、2017年に入りVue.jsが流行している感じです。ちなみに、eatもVue.jsを採用しています。

余談ですがこれらフレームワークに加え、フロントエンド界隈はaltJSやモジュールバンドラ・タスクランナー・トランスパイラなど開発環境も混沌としているせいか、知人のエンジニアは「フロントエンドはしんどい」と嘆いていました。

フロントエンドエンジニアは、ここ数年で急激にスキル取得の難易度がり、毎年トレンドが入れ替わる、加えてこれらを使う案件の増加ということも有り常に人材不足の状況です。

<h3>結局何を覚えればいいの？</h3>
デザイナー/コーダーからの転向を考えている方や、あるいはバックエンドエンジニアがスキルアップを考えている方に「結局何を覚えればいいの？」と聞かれますが、こればかりは答えはないですね。ReactやVueの案件が増えつつありますが、数年安泰というものでもありませんし、どうしてもaltJSや開発環境とセットになる部分もありますので。

ただ、ITアーキテクトやPMなどがプロジェクトへの導入を検討している場合は、Vue.jsがおすすめですね。

・本格的なSPAにも従来的なWEBサービスにも対応できる。
・CDNなどを用いて、既存のフレームワークに部分導入できる。
・既存サービスへの部分導入も可能。jQueryとの併用も。
・React的コンポーネント指向とAngular.jsの構文という2大フレームワークのいいとこどり。
・日本語ドキュメントが充実している
・学習コストが低い。
・altJSや開発環境、コンパイラの縛りなし。

難点といえばレガシーブラウザへの対応ぐらいですが、そもそもレガシーブラウザ対応を視野に入れた、モダンJSフレームワークによるWEBアプリ開発なんてない（ないよね？）と思いますので、考えなくてもいいかと。

<h3>JavaScriptフレームワークに興味のある仲間募集</h3>
そんなわけで「JSフレームワークによるWEBアプリ開発」に興味のある仲間募集です。まだjQueryやPHPでしか開発したことないけど。。。という方も、まずはお話からでも結構です。
